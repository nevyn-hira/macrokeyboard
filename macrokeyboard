#!/usr/bin/env python3
# -*- coding: latin-1 -*-

import evdev
import os
import json
import sys
import getopt
from wmctrl import Window
from Actioner import Actioner
from modifierkeys import Modifierkeys
import notify2 as notify

def print_help():
    helptext="""\
Usage:
  macrokeyboard -v -c <config_file>

Configuration file is in json format and needs to have device defined.
-v  :               Verbose. Use this mode if you want to see the key codes and
                    the window classes (great for when writing a config file)
-c <config_file> :  Use config file. Particularly useful when you want multiple
                    macro keyboards.
/"""
    print("\n\n"+helptext+"\n\n")

class Configuration:
    def __init__( self, configFile ):
        self.config_file = configFile
        self.config = []
        self.readConfiguration()
        self.keyIndex = {}

        for ikey in self.config['keys']:
            keys = ikey.split('+',1)
            if keys[0] not in self.keyIndex:
                self.keyIndex[keys[0]] = []
            self.keyIndex[keys[0]].append(self.config['keys'][ikey])
            if len(keys) > 1:
                self.keyIndex[keys[0]][len(self.keyIndex[keys[0]]) -1 ]["modifiers"] = keys[1]

    def find( self, key ):
        if key in self.keyIndex:
            return self.keyIndex[key]
        else:
            return False

    def readConfiguration( self ):
        if not os.path.exists(self.config_file):
            sys.exit('Configuration file not found.')
            sys.exit(1)
        with open(self.config_file) as json_file:
            self.config = json.load(json_file)
        if( not 'device' in self.config ):
            sys.exit('No device defined.')
        else:
            self.device = self.config['device']
            self.modifierkeys = Modifierkeys( self.config['modifier_keys'] )

class Controller:
    def __init__( self, configfile ):
        self.modifierkeys = None
        self.keys = []
        self.rawkeyboard = None
        self.config = Configuration( configfile )
        self.device = self.config.device
        self.modifierkeys = self.config.modifierkeys
        self.actioner = Actioner()
        self.actioner.populateMimeLists(self.config.config['mimetypelists'])
        # pass any mime type lists to actioner...

    def initDevice(self):
        if os.access( self.device,os. R_OK ):
            self.rawkeyboard = evdev.InputDevice(self.device)
            self.rawkeyboard.grab()
        else:
            sys.exit('No read access to input device')

    def __toggleNumLock( self ):
        self.actioner.execute('xdotool','key Num_Lock')

    def __toggleCapsLock( self ):
        self.actioner.execute('xdotool','key Caps_Lock')

    def loop(self, VERBOSE):
        self.initDevice()
        DISABLECAPS = False
        FORCENUM = False
        if "disable_capslock" in self.config.config:
            if self.config.config["disable_capslock"]:
                DISABLECAPS = True
                if evdev.ecodes.LED_CAPSL in self.rawkeyboard.leds():
                    self.__toggleCapsLock()
        if "force_numlock" in self.config.config:
            if self.config.config["force_numlock"]:
                FORCENUM = True
                if not evdev.ecodes.LED_NUML in self.rawkeyboard.leds():
                    self.__toggleNumLock()
        if "launch-notify" in self.config.config:
            if self.config.config["launch-notify"]:
                self.actioner.setNotifications()
        while True:
            for event in self.rawkeyboard.read_loop():
                if DISABLECAPS:
                    if evdev.ecodes.LED_CAPSL in self.rawkeyboard.leds():
                        self.__toggleCapsLock()
                if FORCENUM:
                    if not evdev.ecodes.LED_NUML in self.rawkeyboard.leds():
                        self.__toggleNumLock()

                if event.type == evdev.ecodes.EV_KEY:
                    key = evdev.categorize(event)
                    try:
                        active_window = Window.get_active()
                    except:
                        # pass
                        print("fuck")
                    if VERBOSE:
                        print( 'Keycode: ' + key.keycode )
                        try:
                            print( '  wm_class:       ' + active_window.wm_class )
                            print( '  wm_window_role: ' + active_window.wm_window_role )
                        except:
                            pass
                    if( key.keystate == key.key_down ):
                        if not self.modifierkeys.keydown( key.keycode ):
                            # action = False
                            action_info = ""
                            keyconfigs = self.config.find(key.keycode)
                            if keyconfigs:
                                noMod = ""
                                for i, config in enumerate(keyconfigs):
                                    if "modifiers" in config:
                                        if self.modifierkeys.checkmodifiers(config["modifiers"].split('+')):
                                            action_info = keyconfigs[i]
                                    else:
                                        noMod = keyconfigs[i]
                                if action_info == "" and noMod != "":
                                    action_info = noMod
                                if "context_class" in action_info:
                                    print(active_window.wm_class)
                                    if active_window.wm_class in action_info["context_class"]:
                                        action_info = action_info["context_class"][active_window.wm_class]
                                if "context_role" in action_info:
                                    if active_window.wm_window_role in action_info["context_role"]:
                                        action_info = action_info["context_role"][active_window.wm_window_role]
                            if 'action' in action_info:
                                if action_info['action'] == 'reload':
                                    self.config.readConfiguration()
                                    self.actioner.populateMimeLists(self.config.config['mimetypelists'])
                                elif action_info['action'] == 'exit':
                                    sys.exit(0)
                                else:
                                    print(action_info)
                                    self.actioner.action(action_info)
                        elif VERBOSE:
                            print("Modifier pressed")
                    elif( key.keystate == key.key_up ):
                        self.modifierkeys.keyup( key.keycode )

# MAIN
def main(argv):
    # Commandline parameters
    notify.init("MacroKeyboard")
    configFile = os.path.join(os.path.expanduser('~'), '.macrokeyboard.json')
    VERBOSE = False
    try:
        opts, _ = getopt.getopt(argv, "hvc:", ["help,verbose,config="])
    except getopt.GetoptError:
        print_help()
        sys.exit(2)
    for opt, arg in opts:
        if opt in ["-h","--help"]:
            print_help()
            sys.exit()
        elif opt in [ "-v", "--verbose" ]:
            VERBOSE = True
        elif opt in [ "-c", "--config" ]:
            configFile = arg

    # config = Configuration( configFile )
    controller = Controller(configFile)
    while True:
        try:
            while True:
                controller.loop(VERBOSE)
        except KeyboardInterrupt:
            sys.exit(0)
        except OSError:
            found = False
            while not found:
                found=os.path.exists(controller.device)

if __name__ == "__main__":
    main([]) if len( sys.argv ) == 0 else main( sys.argv[ 1: ])